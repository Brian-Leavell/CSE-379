.data

prompt:		.string "Commence Testing :)", 0
prompt2: 	.string "Select an Option Below", 0
option1: 	.string "1.) RGB LED (SW1 Tiva)", 0
option2: 	.string "2.) LED + Switches", 0
option3: 	.string "3.) Keypad", 0
num_string: .string "    ", 0

.text
.global lab4

lab4:
PUSH {lr}

  ;Code below turns on clock for port F
  MOV r0, #0xE608
  MOVT r0, #0x400F

  BL serial_init	;Initialize UART

BL gpio_btn_and_LEDS_init; Initialize switches



  LDRB r1, [r0]
  ORR r1, r1, #32

  STRB r1, [r0]

  BL rgb_test

  POP {lr}
  MOV pc, lr
;-----------------------------------------------------------------------------------------------------------------------
rgb_test:
PUSH {lr}
PUSH {v1}
restart_rgb_color:
MOV v1, #0

next_color:
ADD v1, v1, #1
read_sw1_loop:
CMP v1, #8
;BEQ theend
BEQ restart_rgb_color
  BL read_from_push_btn
  CMP r0, #1
  BEQ call_rgb_output
  B read_sw1_loop


call_rgb_output:

  MOV r0, v1
  BL illuminate_RGB_LED
  B next_color

theend:

POP {v1}
POP {lr}
MOV pc, lr
;-----------------------------------------------------------------------------------------------------------------------------
read_from_push_btn:
PUSH {lr}

  ;loads base address for port f into r0
  MOV r0, #0x5000
  MOVT r0, #0x4002
  ;sets the bit for pin 4 to be an input
  LDRB r1, [r0, #0x400]
  BIC r1, r1, #16
  STRB r1, [r0, #0x400]
  ;set pin 4 to be digital
LDRB r1, [r0, #0x51C]
  ORR r1, r1, #16
  STRB r1, [r0, #0x51C]
;sets the pull up register for PF4
LDRB r1, [r0, #0x510]
ORR r1, r1, #16
STRB r1, [r0, #0x510]
BL not_a_fork_bomb
  ;loads the data register for port f and stores the value for pin 4 in r0
  LDRB r1, [r0, #0x3FC]
  UBFX r1, r1, #4, #1
  MVN r0, r1
AND r0, r0, #1


POP {lr}
MOV pc, lr

;-------------------------------------------------------------------------------------------------------------------------------------------

illuminate_RGB_LED:
PUSH {lr}

        ;
  MOV r1, #0x5000
  MOVT r1, #0x4002

  ;sets the bits for pins 1,2,3 to be outputs
  LDRB r2, [r1, #0x400]
  ORR r2, r2, #14
  STRB r2, [r1, #0x400]
  ;sets the bits for pins 1,2,3 to be digital
  LDRB r2, [r1, #0x51C]
  ORR r2, r2, #14
  STRB r2, [r1, #0x51C]
  ;loads the data register for port f, inserts the desired bits for the LEDs to be active, and stores the new value for the data register back.
  LDRB r2, [r1, #0x3FC]
  BFI r2, r0, #1, #3
  STRB r2, [r1, #0x3FC]


POP {lr}
MOV pc, lr

;-----------------------------------------------------------------------------------------------------------------------------------------------------

not_a_fork_bomb:;runs a ton of instructions to give time for the pull up register to actually set. Is actually not a fork bomb just a loop
PUSH {lr}
PUSH{r0}
PUSH{r1}

MOV r0, #0xFFFF
MOVT r0, #0x0002
MOV r1, #0

perhaps_a_fork_bomb:
SUB r0, r0, #1
CMP r0, r1
BEQ nomorefork
B perhaps_a_fork_bomb

nomorefork:
POP {r1}
POP {r0}
POP {lr}

MOV pc, lr

;---------------------------------------------------------------------------------------------------------------------------------------------------------------

menu:

PUSH {lr}
start_here:
ldr r4, ptr_to_prompt
ldr r5, ptr_to_prompt2
ldr r6, ptr_to_option1
ldr r7, ptr_to_option2
ldr r8, ptr_to_option3
ldr r9, ptr_to_num_string


MOV r0, r4	;Place first prompt into r0
BL output_string	;Output prompt to user

MOV r0, r5
BL output_string	;Outputs second prompt

;Below prints out the options for the users, 1-5
MOV r0, r6
BL output_string
MOV r0, r7
BL output_string
MOV r0, r8
BL output_string

MOV r0, r9	;Stores whatever user enters into memory
BL read_string
BL string2int	;Convert string into integer for menu selection option

CMP r0, #1
BEQ rgb_test_go

CMP r0, #2
BEQ led_test_go

CMP r0, #3
BEQ keypad_test_go


else:

POP {lr}
MOV pc, lr


rgb_test_go:
BL rgb_test
B start_here

led_test_go:
BL led_test
B start_here

keypad_test_go:
BL keypad_test
B start_here

;---------------------------------------------------------------------------------------------------------------------------------------------------------------




.end
