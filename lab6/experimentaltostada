	.data

	.global prompt
	.global mydata

prompt:	.string "Use WASD to control the asterisk. Press SW1 to double the speed. How fast can you go?", 0xA, 0xD, "Current Speed: ", 0
promptcount: .byte 1
move_count: .byte 0
exit_prompt: .string "Final Speed: ", 0
exit_prompt_2: .string "Number of Moves: ", 0
promptcount_string: .string "          ", 0
move_count_string: .string "          ", 0

mydata:	.byte	0x20	; This is where you can store data.
			; The .byte assembler directive stores a byte
			; (initialized to 0x20) at the label mydata.
			; Halfwords & Words can be stored using the
			; directives .half & .word


bored:	.string "----------------------", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|         *          |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "|                    |", 0xA, 0xD
		.string "----------------------", 0x0

x_coord: .byte 10
y_coord: .byte 9
prev_key: .byte 100
col_bool: .byte 0

	.text

	.global uart_interrupt_init
	.global gpio_interrupt_init
	.global UART0_Handler
	.global Switch_Handler
	.global Timer_Handler		; This is needed for Lab #6
	.global simple_read_character
	.global output_character	; This is from your Lab #4 Library
	.global read_string		; This is from your Lab #4 Library
	.global output_string		; This is from your Lab #4 Library
	.global uart_init		; This is from your Lab #4 Library
	.global lab6

ptr_to_prompt:		.word prompt
ptr_to_mydata:		.word mydata
ptr_to_x_coord: .word x_coord
ptr_to_y_coord: .word y_coord
ptr_to_prev_key: .word prev_key
ptr_to_col_bool: .word col_bool
ptr_to_bored: .word bored
ptr_to_promptcount: .word promptcount
ptr_to_exit_prompt: .word exit_prompt
ptr_to_move_count: .word move_count
ptr_to_exit_prompt_2: .word exit_prompt_2
ptr_to_promptcount_string: .word promptcount_string
ptr_to_move_count_string: .word move_count_string

lab6:	; This is your main routine which is called from your C wrapper
	PUSH {lr}   		; Store lr to stack
	;ldr r4, ptr_to_prompt
	;ldr r5, ptr_to_mydata

    bl uart_init
	bl uart_interrupt_init
	BL gpio_interrupt_init
	BL Timer_Init
	BL update_screen

lab_6_loop:; keep looping main until a collision has been detected
	LDR r1, ptr_to_col_bool
	LDRB r1, [r1]
	CMP r1, #0
	BEQ lab_6_loop

	BL game_over


	POP {lr}		; Restore lr from the stack
	MOV pc, lr



uart_interrupt_init:

;Loads UARTIM address
	MOV r0, #0xC000
	MOVT r0, #0x4000

	;Sets RIXM for UART
	LDR r1, [r0, #0x038]
	ORR r1, r1, #0x10
	STR r1, [r0, #0x038]

	;Clear UART Interrupt
	LDRB r1, [r0, #0x044]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x044]

	;Configures processor to allow UART to interrupt processor
	;Load Interrupt Set Enable Register
	MOV r0, #0xE000
	MOVT r0, #0xE000

	LDRB r1, [r0, #0x100]
	ORR r1, r1, #0x20
	STRB r1, [r0, #0x100]


	MOV pc, lr


gpio_interrupt_init:

	;Code below turns on clock for port F
	MOV r0, #0xE608
	MOVT r0, #0x400F

	LDRB r1, [r0]
	ORR r1, r1, #32
	STRB r1, [r0]

	;*Set pin F4 to be an Input*
	MOV r0, #0x5000			;Load port F address
    MOVT r0, #0x4002

	LDRB r1, [r0, #0x400]
	AND r1, r1, #0xEF
	STRB r1, [r0, #0x400]

	;*Set pin F4 to be Digital*
	LDRB r1, [r0, #0x51C]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x51C]

	;Turn on pullup resistor for pin F4
	LDRB r1, [r0, #0x510]
	ORR r1, r1, #16
	STRB r1, [r0, #0x510]

	;Make interrupt for SW1 edge sensitive
	LDRB r1, [r0,#0x404]
	AND r1, r1, #0xEF
	STRB r1, [r0, #0x404]

	;Make interrupt for SW1 single edge triggering
	LDRB r1, [r0,#0x408]
	AND r1, r1, #0xEF
	STRB r1, [r0, #0x408]

	;Make interrupt for SW1 falling edge trigger
	LDRB r1, [r0,#0x40C]
	AND r1, r1, #0xEF
	STRB r1, [r0, #0x40C]

	;Enable intterupt for SW1 Tiva
	LDRB r1, [r0,#0x410]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x410]

	;Clear intterupt flag for SW1 Tiva to allow a different interrupt to activate if needed
	LDRB r1, [r0,#0x41C]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x41C]

	;Allow GPIO Port F to use interrupts
	MOV r0, #0xE100
	MOVT r0, #0xE000

	LDRB r1, [r0, #3]
	ORR r1, r1, #0x40
	STRB r1, [r0, #3]


	MOV pc, lr

Timer_Init:

		PUSH {lr}

	   ;Connects clock to Timer by writing a 1 to bit 0
		MOV r0, #0xE604
		MOVT r0, #0x400F
		LDRB r1, [r0]
		ORR r1, r1, #1
		STRB r1, [r0]

		;Disables timer by writing a 0 to bit 0
		MOV r0, #0x0000
		MOVT r0, #0x4003
		LDRB r1, [r0, #0x00C]
		BFC r1, #0, #1
		STRB r1, [r0, #0x00C]

		;Set Timer to 32-bit mode
		LDRB r1, [r0]
		BFC r1, #0, #3
		;ORR r1, r1, #1
		STRB r1, [r0]

		;Set Timer to be in periodic mode
		LDRB r1, [r0, #0x004]
		BFC r1, #0, #2
		ORR r1, r1, #0x2
		STRB r1, [r0, #0x004]

		;set initial interrupt period to 1 second
		MOV r1, #0x2400
		MOVT r1, #0x00F4
		STR r1, [r0, #0x028]


		;Enable Timer to interrupt processor
		LDRB r1, [r0, #0x018]
		ORR r1, r1, #1
		STRB r1, [r0, #0x018]

		;Interrupt Servicing, clears interrupt
		;LDRB r1, [r0, #0x024]
		;ORR r1, r1, #1
		;STRB r1, [r0, #0x024]

		;Configure processor to allow Timer to interrupt
		MOV r0, #0xE000
		MOVT r0, #0xE000
		LDR r1, [r0, #0x100]
		ORR r1, r1, #0x80000
		STR r1, [r0, #0x100]

		;Interrupt Servicing, clears interrupt
		MOV r0, #0x0000
		MOVT r0, #0x4003
		LDRB r1, [r0, #0x024]
		ORR r1, r1, #1
		STRB r1, [r0, #0x024]

		;Enables timer by writing a 1 to bit 0
		MOV r0, #0x0000
		MOVT r0, #0x4003
		LDRB r1, [r0, #0x00C]
		ORR r1, r1, #1
		STRB r1, [r0, #0x00C]

		POP {lr}

		MOV pc, lr


UART0_Handler:

	PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}

	;clear the interrupt flag
	MOV r0, #0xC000
	MOVT r0, #0x4000
	LDRB r1, [r0, #0x044]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x044]

	BL read_character
	BL update_direction


	POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}

	BX lr       	; Return

Switch_Handler:

	PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}
	PUSH {r0,r1}


  	;clear the flag here pls thx
	MOV r0, #0x5000			;Load port F address
	MOVT r0, #0x4002
	;Clear intterupt flag for SW1 Tiva to allow a different interrupt to activate if needed
	LDRB r1, [r0,#0x41C]
	ORR r1, r1, #0x10
	STRB r1, [r0, #0x41C]

  	;Address that holds time interval of Timer
  	MOV r0, #0x0
  	MOVT r0, #0x4003

  	;Divide by 2 so * moves twice as fast
  	LDR r1, [r0, #0x028]
  	LSR r1, r1, #1
  	STR r1, [r0, #0x028]

  	LDR r0, ptr_to_promptcount;; increment the speed counter
  	LDRB r1, [r0]
  	ADD r1, r1, #1
  	STRB r1, [r0]



  	POP {r0,r1}
	POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}
	BX lr       	; Return

Timer_Handler:

	; Your code for your Timer handler goes here.  It is not needed
	; for Lab #5, but will be used in Lab #6.  It is referenced here
	; because the interrupt enabled startup code has declared Timer_Handler.
	; This will allow you to not have to redownload startup code for
	; Lab #6.  Instead, you can use the same startup code as for Lab #5.
	; Remember to preserver registers r4-r11 by pushing then popping
	; them to & from the stack at the beginning & end of the handler.

	PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}

	;clear timer interrupt flag
	MOV r0, #0x0000
	MOVT r0, #0x4003
	LDRB r1, [r0, #0x024]
	ORR r1, r1, #1
	STRB r1, [r0, #0x024]

	BL clear_pos
	BL update_pos
	BL write_pos
	BL update_screen

	LDR r0, ptr_to_move_count;increment move count
	LDRB r1, [r0]
	ADD r1, r1, #1
	STRB r1, [r0]
	;MOV r0, #48
	;BL output_character

	POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}


	BX lr       	; Return


simple_read_character:

	PUSH {lr}   ; Store register lr on stack

	MOV r1, #0xC000				;Load from mem the UART Data Register
	MOVT r1, #0x4000

	LDRB r2, [r1]				;Grab the first byte, "data" section holding the character that was pressed on the keyboard
	MOV r0, r2					;Pass to r0 for output character can use it

	POP {lr}
	MOV PC,LR      	; Return

output_character:

	PUSH {lr}   ; Store register lr on stack

	MOV r1, #0xC018; load bottom of flag register address into r1
	MOVT r1, #0x4000; load top of flag register address into r1
	MOV r2, #0xC000; load bottom of data register address into r2
	MOVT r2, #0x4000; load top of data register address into r2

mysillylittlelabel:
	LDRB r3, [r1]; load value in flag register into r3
	AND r3, r3, #0x20; mask to get value of TxFF
	CMP r3, #0; see if TxFF is zero yet
	BNE mysillylittlelabel; if TxFF is not zero yet, load and check agaiN
	;CMP r0, #0xD
	;BEQ fixreturn
	STRB r0, [r2]; if TxFF is zero, store value of r0 in data register
	B afterfixreturn
fixreturn:
	STRB r0, [r2]
	MOV r0, #0xA
	B mysillylittlelabel
afterfixreturn:
	POP {lr}
	MOV pc, lr

;------------------------------------------------------------------------------------------------------------------------------------------
output_string:

	PUSH {lr};prints the null terminated string starting at address in r0 to standard output
	MOV r1, r0; put mem adress in r1 since r0 will be changed

OSloop:
	LDRB r0, [r1]; get byte at mem pointer
	CMP r0, #0; check to see if null byte hit
	BEQ OSend
	PUSH {r1}
	BL output_character
	POP {r1}
	ADD r1, r1, #1; increment memory pointer to next digit
	B OSloop

OSend:
	;MOV r0, #0xD; if null byte, load value for "enter" instead
	BL output_character
	POP {lr}
	MOV pc, lr

uart_init:
	PUSH {lr}  ; Store register lr on stack

	;Enables clock for UART0
	MOV r0, #0xE618
	MOVT r0, #0x400F
	MOV r1, #1
	STR r1, [r0]
	;Enables clock for PORTA
	MOV r0, #0xE608
	MOVT r0, #0x400F
	MOV r1, #1
	STR r1, [r0]
	;Disables UART0 control
	MOV r0, #0xC030
	MOVT r0, #0x4000
	MOV r1, #0
	STR r1, [r0]
	;Sets the Baud Rate for UART0_IBRD_R to 115,200
	MOV r0, #0xC024
	MOVT r0, #0x4000
	MOV r1, #8
	STR r1, [r0]
	;Sets the Baud Rate for UART0_FBRD_R to 115,200
	MOV r0, #0xC028
	MOVT r0, #0x4000
	MOV r1, #44
	STR r1, [r0]
	;Ensures we are using the system clock
	MOV r0, #0xCFC8
	MOVT r0, #0x4000
	MOV r1, #0
	STR r1, [r0]
	;Sets the word length to 8 bits with 1 stop bit and no parity bits
	MOV r0, #0xC02C
	MOVT r0, #0x4000
	MOV r1, #0x60
	STR r1, [r0]
	;Enables UART0 Control
	MOV r0, #0xC030
	MOVT r0, #0x4000
	MOV r1, #0x301
	STR r1, [r0]

	;Sets PA0 to Digital Port
	MOV r0, #0x451C
	MOVT r0, #0x4000
	LDR r1, [r0]
	ORR r1, r1, #0x03
	STR r1, [r0]
	;Sets PA1 to Digital Port
	MOV r0, #0x4420
	MOVT r0, #0x4000
	LDR r1, [r0]
	ORR r1, r1, #0x03
	STR r1, [r0]
	;Configures PA0 and PA1 for UART0
	MOV r0, #0x452C
	MOVT r0, #0x4000
	LDR r1, [r0]
	ORR r1, r1, #0x11
	STR r1, [r0]

	POP {lr}
	mov pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------

;---------------------------------------------------------------------------------------------------------------------------------------------------------------
clear_pos:

	PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  PUSH {r0,r1}

  MOV r2, #24 ;constant for multiplying to go through rows of board

  ;Load the y coordinate, mult by 24 to get what row we are in currently
  LDR r0, ptr_to_y_coord
  LDRB r0, [r0]
  MUL r0, r0, r2

  ;Load x coordinate and combine with y to find location with *
  LDR r1, ptr_to_x_coord
  LDRB r1, [r1]
  ADD r0, r0, r1

  ;Load board with this offset to go to that playable space
  LDR r3, ptr_to_bored
  ADD r3, r3, r0

  ;Load space into register, store in memory to clear that space
  MOV r1, #0x20
  STRB r1, [r3]


  POP {r0,r1}
	POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
read_character:
	PUSH {lr}   ; Store register lr on stack

	; Your code for your read_character routine is placed here
	MOV r1, #0xC018				;These two lines move the flag data register address from mem into r1
	MOVT r1, #0x4000

rcharloop:
	LDRB r3, [r1]				;Offset to reach TxFF and TxFE
	AND r3, r3, #0x10			;AND Logic to isolate bit stored in TxFE register

	CMP r3, #0					;If 0, flag is set and register is holding a value
	BEQ gotit
	B rcharloop						;Reload and AND again if flag is a 1, meaning register is empty

gotit:
	MOV r1, #0xC000				;Load from mem the UART Data Register
	MOVT r1, #0x4000

	LDRB r3, [r1]				;Grab the first byte, "data" section holding the character that was pressed on the keyboard
	MOV r0, r3					;Pass to r0 for output character can use it

	POP {lr}
	mov pc, lr

;---------------------------------------------------------------------------------------------------------------------------------------------------------------
update_col:
	PUSH {lr}

	LDR r0, ptr_to_x_coord
	LDRB r0, [r0] ;load current x value of player
	CMP r0, #1 ;check if player went out left side of stage
	BLT iscollision
	CMP r0, #20 ;check if player went out right side of stage, if we want to use different size board instead of using magic number 20 we would have to load the board width from memory and compare to that
	BGT iscollision

	LDR r0, ptr_to_y_coord
	LDRB r0, [r0];load current y value of player
	CMP r0, #1;check if player went out top of stage
	BLT iscollision
	CMP r0, #20 ;check if player went out bottom of stage, if we want to use different size board instead of using magic number 20 we would have to load the board height from memory and compare to that
	BGT iscollision

	B update_col_end; jump over iscollsion if no collision occurred


iscollision:; set col_bool to 1 if a collision occurred
	LDR r0, ptr_to_col_bool
	MOV r1, #1
	STRB r1, [r0]

update_col_end:

	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
update_direction:
	PUSH {lr}

	LDR r1, ptr_to_prev_key ; load address of storage for key pressed in case we want to update it
	CMP r0, #119; see if input is "w"
	BEQ do_update

	CMP r0, #97 ; see if input is "a"
	BEQ do_update

	CMP r0, #115 ; see if input is "s"
	BEQ do_update

	CMP r0, #100 ; see id input is "d"
	BEQ do_update

	B update_direction_end ; skip over updates if no valid keys pressed


do_update:; updates prev_key with whatever is in r0
	STR r0, [r1]

update_direction_end:

	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
update_screen:
	PUSH {lr}

	MOV r0, #0xC
	BL output_character;clear the screen

	LDR r0, ptr_to_prompt;print the prompt
	BL output_string

	LDR r0, ptr_to_promptcount;print the speed counter
	LDRB r0, [r0]
	ADD r0, r0, #48
	BL output_character
	MOV r0, #0xA
	BL output_character
	MOV r0, #0xD
	BL output_character

	LDR r0, ptr_to_bored;print the board
	BL output_string

	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
update_pos:

  PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  PUSH {r0,r1}

  ;Load pointer to previously pushed key
  LDR r0, ptr_to_prev_key
  LDRB r0, [r0]

  ;Key pressed was w
  CMP r0, #0x77
  BEQ yDec
  ;Key pressed was a
  CMP r0, #0x61
  BEQ xDec
  ;Key pressed was s
  CMP r0, #0x73
  BEQ yInc
  ;Key pressed was d
  CMP r0, #0x64
  BEQ xInc

  B end


;Increments y coord by 1
yInc:
    LDR r1, ptr_to_y_coord
    LDRB r0, [r1]
    ADD r0, r0, #1
    STRB r0, [r1]
    B end

;Decrements y coord by 1
yDec:
    LDR r1, ptr_to_y_coord
    LDRB r0, [r1]
    SUB r0, r0, #1
    STRB r0, [r1]
    B end

;Increments x coord by 1
xInc:
    LDR r1, ptr_to_x_coord
    LDRB r0, [r1]
    ADD r0, r0, #1
    STRB r0, [r1]
    B end

;Decrements x coord by 1
xDec:
    LDR r1, ptr_to_x_coord
    LDRB r0, [r1]
    SUB r0, r0, #1
    STRB r0, [r1]
    B end

end:
  BL update_col  ;called to see if a collision occured

  POP {r0,r1}
  POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
write_pos:

	PUSH {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  PUSH {r0, r1}


  MOV r2, #24 ;constant for multiplying to go through rows of board

  ;Load the y coordinate, mult by 24 to get what row we are in currently
  LDR r0, ptr_to_y_coord
  LDRB r0, [r0]
  MUL r0, r0, r2

  ;Load x coordinate and combine with y to find location with *
  LDR r1, ptr_to_x_coord
  LDRB r1, [r1]
  ADD r0, r0, r1

  ;Load board with this offset to go to that playable space
  LDR r3, ptr_to_bored
  ADD r3, r3, r0

  ;Load * into register and write onto the board
  MOV r1, #0x2A
  STRB r1, [r3]


  POP {r0,r1}
  POP {r4,r5,r6,r7,r8,r9,r10,r11,lr}
  MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
game_over:
	PUSH {lr}

	MOV r0, #0x000C;disable the timer
	MOVT r0, #0x4003
	MOV r1, #0
	STRB r1, [r0]
	;LDRB r1, [r0]
	;BIC r1, r1, #1
	;STRB r1, [r0]


	MOV r0, #0xC;clear screen
	BL output_character

	MOV r0, #71;Print G
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #65;Print A
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #77;Print M
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #69;Print E
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #32;Print Space
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #79;Print O
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #86;Print V
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #69;Print E
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #82;Print R
	BL output_character
	BL not_a_fork_bomb;delay

	MOV r0, #0xA
	BL output_character;newline and carriage return

	MOV r0, #0xD
	BL output_character

	LDR r0, ptr_to_exit_prompt;print "Final Speed: "
	BL output_string

	LDR r0, ptr_to_promptcount; print the final speed
	LDRB r0, [r0]
	LDR r1, ptr_to_promptcount_string
	BL int2string
	LDR r0, ptr_to_promptcount_string
	BL output_string

	;ADD r0, r0, #48
	;BL output_character

	MOV r0, #0xA
	BL output_character;newline and carriage return

	MOV r0, #0xD
	BL output_character

	LDR r0, ptr_to_exit_prompt_2;print "Number of Moves: "
	BL output_string


	LDR r0, ptr_to_move_count; print the final number of moves
	LDRB r0, [r0]
	LDR r1, ptr_to_move_count_string
	BL int2string
	LDR r0, ptr_to_move_count_string
	BL output_string

	;LDR r0, ptr_to_move_count; print the final number of moves
	;LDRB r0, [r0]
	;ADD r0, r0, #48
	;BL output_character



	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
not_a_fork_bomb:;runs a ton of instructions to give time for the pull up register to actually set. Is actually not a fork bomb just a loop
	PUSH {lr}
	PUSH{r0}
	PUSH{r1}

	MOV r0, #0xFFFF
	MOVT r0, #0x0002
	MOV r1, #0

perhaps_a_fork_bomb:
	SUB r0, r0, #1
	CMP r0, r1
	BEQ nomorefork
	B perhaps_a_fork_bomb

nomorefork:
	POP {r1}
	POP {r0}
	POP {lr}

	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
int2string:
	PUSH {lr};takes int in r0 and address in r1, converts the int to a string and stores at r1
	PUSH {r0}
	MOV r2, r1 ;address to store at is in r2
	PUSH {r2}
	BL get_length
	POP {r2}
	MOV r1, r0
	SUB r1, r1, #1

I2Sloop:
	POP {r0} ;get original r0 back
	PUSH {r0}
	PUSH {r1} ;preserve original r0, current r1 and r2
	BL get_nth ;gets nth digit specifed in r1 from int in r0, stores in r0
	POP {r1}; get back r1 and r2 that may have been changed in get_nth
	ADD r0, r0, #48; add 48 to get ascii value of digit
	STRB r0, [r2]
	ADD r2, r2, #1
	SUB r1, r1, #1
	CMP r1, #0
	BGE I2Sloop
	MOV r0, #0
	STRB r0, [r2]

	POP{lr,r0}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
get_length:
	PUSH {lr}
	MOV r2, #0; initialize accumulator in r2 to 0
	MOV r3, r0; put r0 in r3 so we can modify r0's value without losing r0
	MOV r10, #10

get_lengthloop:
	ADD r2, r2, #1; increase digit count
	SDIV r3, r3, r10; divide by 10 and round down (trying to get to 0)
	CMP r3, #0; checking to see if 0 is reached
	BGT get_lengthloop; if not at zero, we know there's another digit so divide and accumulate again
	MOV r0, r2
	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
get_nth:;takes int in r0 and index in r1, returns number at that index in r0
	PUSH {lr}
	MOV r4, #10
	MOV r3, r0
	MUL r3, r3, r4; preserve the value for first run of loop2
	ADD r1, r1, #1; preserve the value for first run of loop2

get_nthloop:
	SDIV r3, r3, r4
	SUB r1, r1, #1
	CMP r1, #0
	BGT get_nthloop

	MOV r0, r3
	SDIV r3, r3, r4; divide by 10, round down
	MUL r3, r3, r4; multiply by 10, get back same magnitude but 0 in 1's place
	SUB r1, r0, r3; subtract rounded down number from original number

	MOV r0, r1
	POP {lr}
	MOV pc, lr
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------------------------------------------------------------

	.end
